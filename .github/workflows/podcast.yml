name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio (Hannah) + transcript (.txt in audio/)
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # --- Update RSS feed to point at latest audio
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us"

      # --- Commit changes (audio + feed).  Keep .txt for repo history (optional).
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            audio/*.docx
            feed.xml

      # --- Find latest transcript and build email meta
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          files=(audio/*.txt)
          if [ ${#files[@]} -eq 0 ]; then
            echo "found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"
          LATEST_DOCX="${LATEST_TXT%.txt}.docx"

          base="$(basename "$LATEST_TXT")"
          STAMP="${base##*_}"       # e.g., ai_news_20250915.txt
          STAMP="${STAMP%.txt}"     # -> 20250915

          READABLE_DATE="$(python -c "import datetime; s='$STAMP'; d=datetime.datetime.strptime(s, '%Y%m%d'); print(d.strftime('%A, %B %d, %Y'))")"

          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "docx=$LATEST_DOCX" >> "$GITHUB_OUTPUT"
          echo "mp3file=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"
          echo "found=true" >> "$GITHUB_OUTPUT"

      # --- Read transcript into env for inline email body (clickable links)
      - name: Read transcript into env
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DELIM="$(uuidgen | tr -d '-')"
          {
            echo "TRANSCRIPT<<$DELIM"
            cat "${{ steps.latest.outputs.txt }}"
            echo "$DELIM"
          } >> "$GITHUB_ENV"

      # --- Build .docx transcript with live links
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        run: |
          python scripts/make_docx.py "${{ steps.latest.outputs.txt }}" "${{ steps.latest.outputs.docx }}"

      # --- Email transcript (inline body + .docx attachment only)
      - name: Email transcript
        if: steps.latest.outputs.found == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: true
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          subject: "AI Executive Brief transcript — ${{ steps.latest.outputs.date_readable }}"
          attachments: ${{ steps.latest.outputs.docx }}
          body: |
            New episode transcript below (and attached as .docx).

            Episode date: ${{ steps.latest.outputs.date_readable }}
            Feed: https://kyledeguire.github.io/ai-news-audio-feed/feed.xml
            Audio: https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}

            ---- Transcript ----
            ${{ env.TRANSCRIPT }}
