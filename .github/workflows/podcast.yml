name: Weekly AI Executive Brief

on:
  schedule:
    - cron: '5 14 * * 1'     # 14:05 UTC = 08:05 MT (MDT) / 07:05 MST
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3) Deps
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4) Generate MP3 + transcript
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # 5) Update feed enclosure to latest mp3
      - name: Update feed.xml (point enclosure to latest mp3)
        run: |
          python scripts/update_feed.py

      # 6) Commit audio + feed (only if changed)
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief - audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # 7) Discover latest files + build email meta
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if ls -1 audio/*.txt >/dev/null 2>&1; then
            LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
            LATEST_MP3="${LATEST_TXT%.txt}.mp3"
            STAMP="${LATEST_TXT##*_}"; STAMP="${STAMP%.txt}"
            READABLE_DATE="$(python -c "import os,datetime; s=os.environ['STAMP']; d=datetime.datetime.strptime(s,'%Y%m%d'); print(d.strftime('%A, %b %d, %Y'))" )"
            {
              echo "found=true"
              echo "txt=$LATEST_TXT"
              echo "mp3file=$(basename "$LATEST_MP3")"
              echo "stamp=$STAMP"
              echo "date_readable=$READABLE_DATE"
            } >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      # 8) Read transcript into env (robust delimiter)
      - name: Read transcript into env
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DELIM="$(uuidgen | tr -d '-')"
          {
            echo "TRANSCRIPT<<$DELIM"
            cat "${{ steps.latest.outputs.txt }}"
            echo "$DELIM"
          } >> "$GITHUB_ENV"

      # 9) Compute .docx path
      - name: Compute .docx path
        if: steps.latest.outputs.found == 'true'
        id: docx
        shell: bash
        run: |
          set -euo pipefail
          OUT="audio/${{ steps.latest.outputs.mp3file %.mp3 }}.docx"
          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      # 10) Build .docx transcript
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        run: |
          python scripts/make_docx.py \
            --input "${{ steps.latest.outputs.txt }}" \
            --output "${{ steps.docx.outputs.out }}"

      # 11) Email transcript (.docx attached). Body text is read from file (no multi-line env in YAML).
      - name: Email transcript (.docx attached, full body)
        if: steps.latest.outputs.found == 'true'
        env:
          SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:     ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:    ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:      ${{ secrets.EMAIL_TO }}
          SUBJECT:       AI Executive Brief transcript - ${{ steps.latest.outputs.date_readable }}
          ATTACH_PATH:   ${{ steps.docx.outputs.out }}
          BODY_FILE:     ${{ steps.latest.outputs.txt }}
        run: |
          python scripts/send_email.py
