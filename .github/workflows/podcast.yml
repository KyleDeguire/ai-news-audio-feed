name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio + transcript (.mp3 and .txt in audio/) ---
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # --- Build metadata for later steps (NO here-docs, NO $GITHUB_ENV multiline) ---
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail

          if ! ls -1 audio/*.txt >/dev/null 2>&1; then
            echo "found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"

          STAMP="$(basename "$LATEST_TXT")"
          STAMP="${STAMP#*_}"
          STAMP="${STAMP%.txt}"

          READABLE_DATE="$(python -c "import os,datetime; s=os.environ['STAMP']; d=datetime.datetime.strptime(s,'%Y%m%d'); print(d.strftime('%A, %b %d, %Y'))" )"

          echo "found=true" >> "$GITHUB_OUTPUT"
          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "mp3=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "stamp=$STAMP" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"

      # --- Update RSS feed to include the latest episode item ---
      - name: Update feed.xml (point enclosure to latest mp3)
        if: steps.latest.outputs.found == 'true'
        env:
          FEED_PATH: feed.xml
          AUDIO_DIR: audio
          MP3_BASENAME: ${{ steps.latest.outputs.mp3 }}
          STAMP: ${{ steps.latest.outputs.stamp }}
          READABLE_DATE: ${{ steps.latest.outputs.date_readable }}
          SITE_LINK: https://kyledeguire.github.io/ai-news-audio-feed
        run: |
          python scripts/update_feed.py

      # --- Commit only MP3 + feed (no .txt to repo) ---
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief â€“ audio + feed"
          file_pattern: |
            audio/*.mp3
            feed.xml

      # --- Build .docx transcript file for the email attachment ---
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        env:
          TRANSCRIPT_PATH: ${{ steps.latest.outputs.txt }}
          DOCX_PATH: ${{ github.workspace }}/audio/weekly_brief_${{ steps.latest.outputs.stamp }}.docx
        run: |
          python scripts/make_docx.py

      # --- Email transcript (full body + .docx attached) ---
      - name: Email transcript (.docx attached, full body)
        if: steps.latest.outputs.found == 'true'
        env:
          TRANSCRIPT_PATH: ${{ steps.latest.outputs.txt }}
          DOCX_PATH: ${{ github.workspace }}/audio/weekly_brief_${{ steps.latest.outputs.stamp }}.docx
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}   # 465 for Gmail SSL, 587 for STARTTLS
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          python scripts/send_email.py
