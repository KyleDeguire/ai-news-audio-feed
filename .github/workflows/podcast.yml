name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---------- Generate MP3 + transcript ----------
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          set -euo pipefail
          python scripts/generate_brief.py

      # ---------- Update feed.xml to latest mp3 ----------
      - name: Update feed.xml (point enclosure to latest mp3)
        run: |
          set -euo pipefail
          python scripts/update_feed.py

      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # ---------- Find latest transcript & build email meta ----------
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if ls -1 audio/*.txt >/dev/null 2>&1; then
            LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
            LATEST_MP3="${LATEST_TXT%.txt}.mp3"

            # Extract yyyymmdd at the end of the filename (ai_news_YYYYMMDD.txt)
            STAMP="$(basename "$LATEST_TXT")"
            STAMP="${STAMP##*_}"
            STAMP="${STAMP%.txt}"

            READABLE_DATE="$(python -c "import os,datetime; s=os.getenv('STAMP'); d=datetime.datetime.strptime(s,'%Y%m%d'); print(d.strftime('%A, %b %d, %Y'))" )"

            {
              echo "txt=$LATEST_TXT"
              echo "mp3=$(basename "$LATEST_MP3")"
              echo "stamp=$STAMP"
              echo "date_readable=$READABLE_DATE"
              echo "found=true"
            } >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Read transcript into $GITHUB_ENV safely ----------
      - name: Read transcript into env
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DELIM="$(python -c 'import uuid; print(uuid.uuid4())')"
          {
            echo "TRANSCRIPT<<$DELIM"
            cat "${{ steps.latest.outputs.txt }}"
            echo "$DELIM"
          } >> "$GITHUB_ENV"

      # ---------- Compute .docx path ----------
      - name: Compute .docx path
        if: steps.latest.outputs.found == 'true'
        id: docx
        shell: bash
        run: |
          set -euo pipefail
          base="${{ steps.latest.outputs.txt }}"
          out="${base%.txt}.docx"
          echo "out=$out" >> "$GITHUB_OUTPUT"

      # ---------- Build .docx transcript ----------
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        run: |
          set -euo pipefail
          python scripts/make_docx.py \
            --in "${{ steps.latest.outputs.txt }}" \
            --out "${{ steps.docx.outputs.out }}"

      # ---------- Email transcript (.docx attached, full body) ----------
      - name: Email transcript
        if: steps.latest.outputs.found == 'true'
        env:
          SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:     ${{ secrets.SMTP_PORT }}   # e.g., 465 for Gmail SSL
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:    ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:      ${{ secrets.EMAIL_TO }}
          SUBJECT: "AI Executive Brief transcript – ${{ steps.latest.outputs.date_readable }}"
        run: |
          set -euo pipefail
          BODY=$'Here is the transcript (links clickable) and the .docx attached.\n\n'"$TRANSCRIPT"
          python scripts/send_email.py \
            --server "$SMTP_SERVER" \
            --port "$SMTP_PORT" \
            --user "$SMTP_USERNAME" \
            --password "$SMTP_PASSWORD" \
            --from "$EMAIL_FROM" \
            --to "$EMAIL_TO" \
            --subject "$SUBJECT" \
            --body "$BODY" \
            --attach "${{ steps.docx.outputs.out }}"
