name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio + transcript (.mp3 and .txt in audio/)
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # --- Update RSS feed to point at the latest audio
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us"

      # --- Commit changes (audio/*.mp3, audio/*.txt, feed.xml)
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # --- Find latest transcript & build email meta (guard if none yet)
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if ls -t audio/*.txt >/dev/null 2>&1; then
            LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
            LATEST_MP3="${LATEST_TXT%.txt}.mp3"
            STAMP="${LATEST_TXT##*_}"      # e.g., 20250915.txt
            STAMP="${STAMP%.txt}"          # -> 20250915
            READABLE_DATE="$(date -d "${STAMP:0:4}-${STAMP:4:2}-${STAMP:6:2}" '+%A, %B %d, %Y')"
            {
              echo "txt=${LATEST_TXT}"
              echo "mp3file=$(basename "${LATEST_MP3}")"
              echo "date_readable=${READABLE_DATE}"
              echo "found=true"
            } >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      # --- Read transcript text into $GITHUB_ENV safely (only if found)
            - name: Read transcript into env
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          # Create a delimiter with no whitespace or newline characters
          DELIM=$(python - <<'PY'
import uuid, sys
sys.stdout.write(str(uuid.uuid4()).replace('-', ''))
PY
)

          {
            # Open a multi-line env assignment using our safe delimiter
            printf 'TRANSCRIPT<<%s\n' "$DELIM"
            # Write the transcript contents
            cat "${{ steps.latest.outputs.txt }}"
            # Close the multi-line env assignment with the exact same delimiter
            printf '%s\n' "$DELIM"
          } >> "$GITHUB_ENV"

      # --- Email the transcript (attachment + body) if it exists
      - name: Email transcript
        if: steps.latest.outputs.found == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          subject: "AI Executive Brief transcript — ${{ steps.latest.outputs.date_readable }}"
          attachments: ${{ steps.latest.outputs.txt }}
          # If you use port 465 (SSL): set secure: true, starttls: false
          # If you use port 587 (TLS): set secure: false, starttls: true
          secure: false
          starttls: true
          body: |
            New episode transcript attached.

            Episode date: ${{ steps.latest.outputs.date_readable }}
            Feed: https://kyledeguire.github.io/ai-news-audio-feed/feed.xml
            Audio: https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}

            ---- Transcript ----
            ${{ env.TRANSCRIPT }}
