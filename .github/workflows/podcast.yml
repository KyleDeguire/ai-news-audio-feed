name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --- Repo + Python setup ------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio + transcript (.mp3 and .txt go into audio/) --------
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY:       ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY:   ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID:  ${{ secrets.ELEVENLABS_VOICE_ID }}   # keep if you use a fixed voice id
        run: |
          python scripts/generate_brief.py

      # --- Update RSS feed to point at the latest audio -----------------------
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us"

      # --- Commit changes (publish mp3 + feed to Pages) -----------------------
      # NOTE: we intentionally do NOT commit .txt (transcript) or .docx
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + feed"
          file_pattern: |
            audio/*.mp3
            feed.xml

      # --- Find latest transcript and build email meta ------------------------
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          LATEST_TXT=$(ls -t audio/*.txt | head -n1)
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"
          LATEST_DOCX="${LATEST_TXT%.txt}.docx"
          STAMP="${LATEST_TXT##*_}"; STAMP="${STAMP%.txt}"

          READABLE_DATE=$(python - <<'PY'
import os, datetime
s=os.environ["STAMP"]
d=datetime.datetime.strptime(s,"%Y%m%d")
print(d.strftime("%A, %B %d, %Y"))
PY
)
          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "mp3file=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "docx=$LATEST_DOCX" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"

      # --- Build a .docx from the transcript (for nicer viewing) -------------
      - name: Build .docx transcript
        if: steps.latest.outputs.txt != ''
        run: |
          python scripts/make_docx.py "${{ steps.latest.outputs.txt }}" "${{ steps.latest.outputs.docx }}"

      # --- Email transcript: full body (clickable links) + .docx attachment ---
      - name: Email transcript (.docx attached, full body)
        if: steps.latest.outputs.txt != ''
        env:
          SMTP_SERVER:    ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:      ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME:  ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD:  ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:     ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:       ${{ secrets.EMAIL_TO }}
          EMAIL_SUBJECT:  "AI Executive Brief — ${{ steps.latest.outputs.date_readable }}"
          TRANSCRIPT_TXT:  ${{ steps.latest.outputs.txt }}
          TRANSCRIPT_DOCX: ${{ steps.latest.outputs.docx }}
          AUDIO_URL: "https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}"
          FEED_URL:  "https://kyledeguire.github.io/ai-news-audio-feed/feed.xml"
          DATE_READABLE: ${{ steps.latest.outputs.date_readable }}
        run: |
          python scripts/send_email.py
