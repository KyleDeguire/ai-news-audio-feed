name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --- Repo + Python setup
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio + transcript (.mp3 and .txt in audio/)
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # --- Find latest files (no heredocs)
      - name: Find latest transcript & build meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if ! ls -1 audio/*.txt >/dev/null 2>&1; then
            echo "No transcript found in audio/" >&2
            exit 1
          fi
          LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"
          STAMP="${LATEST_TXT##*_}"; STAMP="${STAMP%.txt}"
          READABLE_DATE=$(python -c "import datetime;print(datetime.datetime.strptime('${STAMP}','%Y%m%d').strftime('%A, %B %d, %Y'))")
          echo "txt=${LATEST_TXT}" >> "$GITHUB_OUTPUT"
          echo "mp3file=$(basename "${LATEST_MP3}")" >> "$GITHUB_OUTPUT"
          echo "date_readable=${READABLE_DATE}" >> "$GITHUB_OUTPUT"

      # --- Update feed.xml using the exact mp3 filename we just found
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us" \
            --audio-file "${{ steps.latest.outputs.mp3file }}"

      # --- Commit site assets (publish mp3 + feed to Pages)
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + feed"
          file_pattern: |
            audio/*.mp3
            feed.xml

      # --- Compute .docx path safely (no expression tricks)
      - name: Compute .docx path
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          IN_TXT="${{ steps.latest.outputs.txt }}"
          OUT_DOCX="${IN_TXT%.txt}.docx"
          echo "docx=${OUT_DOCX}" >> "$GITHUB_OUTPUT"

      # --- Build .docx transcript (not committed)
      - name: Build .docx transcript
        shell: bash
        run: |
          python scripts/make_docx.py "${{ steps.latest.outputs.txt }}" "${{ steps.paths.outputs.docx }}"

      # --- Email (full body + .docx) via Python mailer (avoids env/output size limits)
      - name: Email transcript (.docx attached, full body)
        env:
          SMTP_SERVER:    ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:      ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME:  ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD:  ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:     ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:       ${{ secrets.EMAIL_TO }}
          EMAIL_SUBJECT:  "AI Executive Brief — ${{ steps.latest.outputs.date_readable }}"
          TRANSCRIPT_TXT:  ${{ steps.latest.outputs.txt }}
          TRANSCRIPT_DOCX: ${{ steps.paths.outputs.docx }}
          AUDIO_URL: "https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}"
          FEED_URL:  "https://kyledeguire.github.io/ai-news-audio-feed/feed.xml"
          DATE_READABLE: ${{ steps.latest.outputs.date_readable }}
        run: |
          python scripts/send_email.py
