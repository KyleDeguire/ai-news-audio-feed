name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 3) Generate audio + transcript (.mp3 to audio/, .txt to audio/)
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          # Optional: if you set this, it overrides VOICE_NAME in the script
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # 4) Update RSS feed to latest audio
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us"

      # 5) Commit only MP3 + feed (intentionally DO NOT commit .txt)
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + feed"
          file_pattern: |
            audio/*.mp3
            feed.xml

      # 6) Find latest transcript + build metadata for email
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          # Confirm we have at least one transcript
          if ! ls -1 audio/*.txt >/dev/null 2>&1; then
            echo "No transcript .txt found in audio/. Exiting early."
            exit 1
          fi

          LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"

          # Extract yyyymmdd stamp from filename tail (e.g. *_20250915.txt)
          STAMP="${LATEST_TXT##*_}"
          STAMP="${STAMP%.txt}"

          # Nice date via Python for portability
          READABLE_DATE="$(python - <<'PY'
import datetime, os
s = os.environ["STAMP"]
d = datetime.datetime.strptime(s, "%Y%m%d")
print(d.strftime("%A, %B %d, %Y"))
PY
)"

          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "mp3file=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"

      # 7) Load transcript into $GITHUB_ENV safely (no delimiter mismatch)
      - name: Read transcript into env
        if: steps.latest.outputs.txt
        shell: bash
        run: |
          set -euo pipefail
          DELIM="__TRANSCRIPT_$(date +%s%N)__"
          {
            printf 'TRANSCRIPT<<%s\n' "$DELIM"
            cat "${{ steps.latest.outputs.txt }}"
            printf '%s\n' "$DELIM"
          } >> "$GITHUB_ENV"

      # 8) Build a .docx version of the transcript (not committed)
      - name: Build .docx transcript
        id: docx
        if: steps.latest.outputs.txt
        shell: bash
        run: |
          set -euo pipefail
          IN_TXT="${{ steps.latest.outputs.txt }}"
          OUT_DOCX="${IN_TXT%.txt}.docx"
          TITLE="AI Executive Brief — ${{ steps.latest.outputs.date_readable }}"
          python scripts/make_docx.py "$IN_TXT" "$OUT_DOCX" "$TITLE"
          echo "docx=$OUT_DOCX" >> "$GITHUB_OUTPUT"

      # 9) Email: body includes full transcript (with links), attach .docx
      - name: Email transcript
        if: steps.latest.outputs.txt
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          subject: "AI Executive Brief — ${{ steps.latest.outputs.date_readable }}"
          secure: true
          attachments: ${{ steps.docx.outputs.docx }}
          body: |
            Hi,

            Your new AI Executive Brief is ready.

            • Feed: https://kyledeguire.github.io/ai-news-audio-feed/feed.xml
            • Audio: https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}

            ——— Transcript ———
            ${{ env.TRANSCRIPT }}
