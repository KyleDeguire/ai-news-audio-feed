name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 1) Generate audio + transcript
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # 2) Update feed.xml to point enclosure to latest mp3 (idempotent)
      - name: Update feed.xml (point enclosure to latest mp3)
        run: |
          set -euo pipefail
          python scripts/update_feed.py

      # 3) Commit audio and feed changes
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief — audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # 4) Find latest transcript and build email metadata
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail

          if ls -1 audio/*.txt >/dev/null 2>&1; then
            LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
            LATEST_MP3="${LATEST_TXT%.txt}.mp3"

            # Extract yyyymmdd from filename tail (e.g., ai_news_20250914.txt -> 20250914)
            STAMP="${LATEST_TXT##*_}"
            STAMP="${STAMP%.txt}"

            # Make a nice date string WITHOUT YAML heredocs (avoid parser issues)
            READABLE_DATE="$(python -c "import datetime as d; print(d.datetime.strptime('${STAMP}','%Y%m%d').strftime('%A, %b %d, %Y'))")"

            echo "txt=${LATEST_TXT}" >> "$GITHUB_OUTPUT"
            echo "mp3file=$(basename "${LATEST_MP3}")" >> "$GITHUB_OUTPUT"
            echo "stamp=${STAMP}" >> "$GITHUB_OUTPUT"
            echo "date_readable=${READABLE_DATE}" >> "$GITHUB_OUTPUT"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      # 5) Read transcript into $GITHUB_ENV safely (unique delimiter)
      - name: Read transcript into env
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DELIM="$(python -c 'import uuid; print(uuid.uuid4().hex)')"
          {
            printf 'TRANSCRIPT<<%s\n' "$DELIM"
            cat "${{ steps.latest.outputs.txt }}"
            printf '%s\n' "$DELIM"
          } >> "$GITHUB_ENV"

      # 6) Compute .docx output path for the transcript
      - name: Compute .docx path
        if: steps.latest.outputs.found == 'true'
        id: docx
        shell: bash
        run: |
          set -euo pipefail
          echo "path=audio/brief_${{ steps.latest.outputs.stamp }}.docx" >> "$GITHUB_OUTPUT"

      # 7) Build .docx transcript with clickable links/footnotes
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        run: |
          python scripts/make_docx.py \
            --input "${{ steps.latest.outputs.txt }}" \
            --output "${{ steps.docx.outputs.path }}"

      # 8) Email transcript (.docx attached, full body with links)
      - name: Email transcript (.docx attached, full body)
        if: steps.latest.outputs.found == 'true'
        env:
          SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:     ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:    ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:      ${{ secrets.EMAIL_TO }}
          SUBJECT:       AI Executive Brief transcript — ${{ steps.latest.outputs.date_readable }}
          BODY:          ${{ env.TRANSCRIPT }}
          ATTACH:        ${{ steps.docx.outputs.path }}
        run: |
          python scripts/send_email.py
