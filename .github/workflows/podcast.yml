name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Generate audio + transcript (.mp3 and .txt in audio/)
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        run: |
          python scripts/generate_brief.py

      # --- Find latest transcript & compute meta we reuse below
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          if ! ls audio/*.txt >/dev/null 2>&1; then
            echo "No transcript found in audio/"; exit 1
          fi

          LATEST_TXT=$(ls -t audio/*.txt | head -n1)
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"

          # derive yyyymmdd from filename suffix: e.g., ai_news_20250915.txt -> 20250915
          STAMP_BASE=$(basename "$LATEST_TXT")
          STAMP="${STAMP_BASE##*_}"
          STAMP="${STAMP%.txt}"

          READABLE_DATE=$(python - <<'PY'
import datetime, os
s = os.environ["STAMP"]
d = datetime.datetime.strptime(s, "%Y%m%d")
print(d.strftime("%A, %B %d, %Y"))
PY
)

          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "mp3file=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "stamp=$STAMP" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"

      # --- Update RSS feed now that we know the exact mp3 filename
      - name: Update feed.xml
        run: |
          python scripts/update_feed.py \
            --repo-url "https://kyledeguire.github.io/ai-news-audio-feed" \
            --audio-dir "audio" \
            --feed "feed.xml" \
            --show-title "AI News Weekly – Executive Briefing" \
            --show-description "Weekly AI news analysis and strategic insights for business leaders" \
            --language "en-us" \
            --audio-file "${{ steps.latest.outputs.mp3file }}"

      # --- Commit changes (audio/*.mp3, audio/*.txt, feed.xml)
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief – audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # --- Build .docx transcript (kept as you have it; points at the found .txt)
      - name: Build .docx transcript
        run: |
          TXT="${{ steps.latest.outputs.txt }}"
          DOCX="${TXT%.txt}.docx"
          python scripts/make_docx.py "$TXT" "$DOCX"

      # --- Email transcript (body + .docx attached) using your existing script
      - name: Email transcript (.docx attached, full body)
        env:
          SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:     ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:    ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:      ${{ secrets.EMAIL_TO }}
        run: |
          python scripts/send_email.py \
            --subject "AI Executive Brief — ${{ steps.latest.outputs.date_readable }}" \
            --mp3 "https://kyledeguire.github.io/ai-news-audio-feed/audio/${{ steps.latest.outputs.mp3file }}"
