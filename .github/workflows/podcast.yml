name: Weekly AI Executive Brief

on:
  schedule:
    # 14:05 UTC = 08:05 MT during DST (MDT), 07:05 MST otherwise
    - cron: '5 14 * * 1'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # === Generate audio + transcript (.mp3 and .txt in audio/) ===
      - name: Generate MP3 + transcript
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        shell: bash
        run: |
          set -euo pipefail
          python scripts/generate_brief.py

      # === Update RSS feed enclosure to point to latest mp3 ===
      - name: Update feed.xml (point enclosure to latest mp3)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/update_feed.py

      # === Commit audio + feed ===
      - name: Commit audio + feed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: weekly brief — audio + transcript + feed"
          file_pattern: |
            audio/*.mp3
            audio/*.txt
            feed.xml

      # === Find latest transcript & build email meta (FIXED) ===
      - name: Find latest transcript & build email meta
        id: latest
        shell: bash
        run: |
          set -euo pipefail

          # If no transcript yet, short-circuit so downstream steps can skip
          if ! ls -1 audio/*.txt >/dev/null 2>&1; then
            echo "found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LATEST_TXT="$(ls -t audio/*.txt | head -n1)"
          LATEST_MP3="${LATEST_TXT%.txt}.mp3"

          # Extract yyyymmdd stamp from filename ai_news_YYYYMMDD.txt
          STAMP="$(basename "$LATEST_TXT")"
          STAMP="${STAMP#*_}"
          STAMP="${STAMP%.txt}"

          # Format a human-readable date without touching env in Python
          READABLE_DATE="$(date -d "$STAMP" '+%A, %b %d, %Y')"

          echo "found=true" >> "$GITHUB_OUTPUT"
          echo "txt=$LATEST_TXT" >> "$GITHUB_OUTPUT"
          echo "mp3=$(basename "$LATEST_MP3")" >> "$GITHUB_OUTPUT"
          echo "stamp=$STAMP" >> "$GITHUB_OUTPUT"
          echo "date_readable=$READABLE_DATE" >> "$GITHUB_OUTPUT"

      # === Build .docx transcript (optional) ===
      - name: Build .docx transcript
        if: steps.latest.outputs.found == 'true'
        shell: bash
        run: |
          set -euo pipefail
          python scripts/make_docx.py "${{ steps.latest.outputs.txt }}"

      # === Email transcript (body includes links, attach .docx) ===
      - name: Email transcript (.docx attached, full body)
        if: steps.latest.outputs.found == 'true'
        env:
          SMTP_SERVER:   ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:     ${{ secrets.SMTP_PORT }}   # e.g. 465 for SSL, 587 for STARTTLS
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM:    ${{ secrets.EMAIL_FROM }}
          EMAIL_TO:      ${{ secrets.EMAIL_TO }}
        shell: bash
        run: |
          set -euo pipefail
          python scripts/send_email.py \
            --txt "${{ steps.latest.outputs.txt }}" \
            --subject "AI Executive Brief transcript — ${{ steps.latest.outputs.date_readable }}"
